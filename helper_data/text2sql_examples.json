[
    {
    "db_id": "regional_sales",
    "question": "Which region has the most number of sales team?",
    "evidence": "the most number of sales team refers to MAX(COUNT(SalesTeam));",
    "SQL": "SELECT Region FROM SalesTeam GROUP BY Region ORDER BY COUNT(DISTINCT SalesTeam) DESC LIMIT 1"
},
{
    "db_id": "regional_sales",
    "question": "List all the customers with name containing the word 'Group'.",
    "evidence": "name containing the word 'Group' refers to CustomerNames LIKE '%Group%';",
    "SQL": "SELECT T FROM ( SELECT IIF(CustomerNames LIKE '%Group%', CustomerNames, NULL) AS T FROM Customers ) WHERE T IS NOT NULL"
},
{
    "db_id": "regional_sales",
    "question": "What is the average median income for all City type of stores?",
    "evidence": "AVG(MedianIncome) where Type = 'City';",
    "SQL": "SELECT AVG(MedianIncome) FROM StoreLocations WHERE Type = 'City'"
},
{
    "db_id": "regional_sales",
    "question": "Name the sales team and the region of order number 'SO - 000137'.",
    "evidence": "",
    "SQL": "SELECT T2.SalesTeam, T2.Region FROM SalesOrders AS T1 INNER JOIN SalesTeam AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T1.OrderNumber = 'SO - 000137'"
},
{
    "db_id": "regional_sales",
    "question": "List all the order numbers along with its product name for each order under the sales team of 'Douglas Tucker'.",
    "evidence": "",
    "SQL": "SELECT DISTINCT T1.ProductID, T1.ProductName FROM Products AS T1 INNER JOIN SalesOrders AS T2 ON T2._ProductID = T1.ProductID INNER JOIN SalesTeam AS T3 ON T3.SalesTeamID = T2._SalesTeamID WHERE T3.SalesTeam = 'Douglas Tucker'"
},
{
    "db_id": "regional_sales",
    "question": "Among orders in 2020, name the customers who had the greatest discount applied for 'Cocktail Glasses'",
    "evidence": "MAX(DiscountApplied) where ProductName = 'Cocktail Glasses'; orders in 2020 refer to the OrderDate between 01-01-2020 and 31-12-2020;",
    "SQL": "SELECT DISTINCT T1.CustomerNames FROM Customers AS T1 INNER JOIN SalesOrders AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products AS T3 ON T3.ProductID = T2._ProductID WHERE T3.ProductName = 'Cocktail Glasses' AND SUBSTR(T2.OrderDate, -2) = '20' AND T2.DiscountApplied = ( SELECT T2.DiscountApplied FROM Customers AS T1 INNER JOIN SalesOrders AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products AS T3 ON T3.ProductID = T2._ProductID WHERE T3.ProductName = 'Cocktail Glasses' AND T2.OrderDate LIKE '%/%/20' ORDER BY T2.DiscountApplied DESC LIMIT 1 )"
},
{
    "db_id": "regional_sales",
    "question": "List all the order numbers for In-Store sales and find the city where the store is located.",
    "evidence": "In-Store sales refer to SalesChannel = 'In-Store'; city refers to CityName;",
    "SQL": "SELECT DISTINCT T1.OrderNumber, T2.CityName FROM SalesOrders AS T1 INNER JOIN StoreLocations AS T2 ON T2.StoreID = T1._StoreID WHERE T1.SalesChannel = 'In-Store'"
},
{
    "db_id": "regional_sales",
    "question": "Name the most expensive ordered? Who, when was it ordered?",
    "evidence": "the most expensive refers to MAX(UnitCost); who refers to CustomerNames; when refers to OrderDate;",
    "SQL": "SELECT T2.OrderNumber, T1.CustomerNames, T2.OrderDate FROM Customers AS T1 INNER JOIN SalesOrders AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products AS T3 ON T3.ProductID = T2._ProductID ORDER BY T2.UnitCost DESC LIMIT 1"
},
{
    "db_id": "regional_sales",
    "question": "List all the numbers ordered by 'Rochester Ltd' in 2018.",
    "evidence": "Rochester Ltd is the name of the customer; all the numbers ordered refer to OrderNumber; 2018 refers to SUBSTR(OrderDate, -2) = '18';",
    "SQL": "SELECT DISTINCT T FROM ( SELECT CASE  WHEN T1.OrderDate LIKE '%/%/18' AND T2.CustomerNames = 'Rochester Ltd' THEN T1.OrderNumber ELSE NULL END AS T FROM SalesOrders T1 INNER JOIN Customers T2 ON T2.CustomerID = T1._CustomerID ) WHERE T IS NOT NULL"
},
{
    "db_id": "regional_sales",
    "question": "Provide all the orders from WARE-NMK1003. Name the product and sales team for each of these order.",
    "evidence": "all the orders from WARE-NMK1003 refer to OrderNumber where WarehouseCode = 'WARE-NMK1003'; product refers to ProductName;",
    "SQL": "SELECT DISTINCT T1.ProductName, T3.SalesTeam FROM Products AS T1 INNER JOIN SalesOrders AS T2 ON T2._ProductID = T1.ProductID INNER JOIN SalesTeam AS T3 ON T3.SalesTeamID = T2._SalesTeamID WHERE T2.WarehouseCode = 'WARE-NMK1003'"
},
{
    "db_id": "regional_sales",
    "question": "List the name of all customers who had made orders online.",
    "evidence": "orders online refer to SalesChannel = 'Online';",
    "SQL": "SELECT T FROM ( SELECT CASE  WHEN T2.SalesChannel = 'Online' THEN T1.CustomerNames ELSE NULL END AS T FROM Customers T1 INNER JOIN SalesOrders T2 ON T2._CustomerID = T1.CustomerID ) WHERE T IS NOT NULL"
},
{
    "db_id": "regional_sales",
    "question": "Calculate the average net profit for bakeware product.",
    "evidence": "net profit can be computed as SUBTRACT(UnitPrice, UnitCost); AVG(net profit) where ProductName = 'Bakeware';",
    "SQL": "SELECT AVG(REPLACE(T1.UnitPrice, ',', '') - REPLACE(T1.UnitCost, ',', ''))  FROM SalesOrders AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T2.ProductName = 'Bakeware'"
},
{
    "db_id": "regional_sales",
    "question": "Name the sales team name who had orders with the greatest net profit in 2020.",
    "evidence": "net profit can be computed as SUBTRACT(UnitPrice, UnitCost); the greatest net profit in 2020 refers to MAX(net profit) where OrderDate LIKE '%/20';",
    "SQL": "SELECT T2.SalesTeam FROM SalesOrders AS T1 INNER JOIN SalesTeam AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T1.OrderDate LIKE '%/%/20' GROUP BY T2.SalesTeam ORDER BY SUM(REPLACE(T1.UnitPrice, ',', '') - REPLACE(T1.UnitCost, ',', '')) DESC LIMIT 1"
},
{
    "db_id": "regional_sales",
    "question": "Sate the order number and calculate the net profit for each order under Joshua Bennett.",
    "evidence": "net profit can be computed as SUBTRACT(UnitPrice, UnitCost); Joshua Bennett is the name of SalesTeam;",
    "SQL": "SELECT T1.OrderNumber , REPLACE(T1.UnitPrice, ',', '') - REPLACE(T1.UnitCost, ',', '')  FROM SalesOrders AS T1 INNER JOIN SalesTeam AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T2.SalesTeam = 'Joshua Bennett'"
},
{
    "db_id": "regional_sales",
    "question": "Among the sales order shipped in July 2018, calculate the percentage of orders for home fragrances.",
    "evidence": "shipped in July 2018 refers to ShipDate between 01-07-2018 and 31-07-2018; DIVIDE(COUNT(OrderNumber where ProductName = 'Home Fragrances' and SUBSTR(OrderDate, 1, 1) = '7'), COUNT(OrderNumber where SUBSTR(ShipDate, -2) = '18')) as percentage;",
    "SQL": "SELECT SUM(CASE WHEN T2.ProductName = 'Home Fragrances' THEN 1 ELSE 0 END) * 100 / COUNT(T1.OrderNumber)  FROM SalesOrders AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T1.ShipDate LIKE '7/%/18'"
},
{
    "db_id": "regional_sales",
    "question": "List down the customer IDs and names that start with alphabet \"W\".",
    "evidence": "names that start with alphabet \"W\" refer to CustomerNames LIKE 'W%';",
    "SQL": "SELECT DISTINCT CustomerID, CustomerNames FROM Customers WHERE CustomerNames LIKE 'W%' ORDER BY CustomerNames DESC"
},
{
    "db_id": "regional_sales",
    "question": "List down the product IDs and names that include the word \"Outdoor\".",
    "evidence": "names that include the word \"Outdoor\" refer to ProductName LIKE '%Outdoor%';",
    "SQL": "SELECT ProductID, T FROM ( SELECT ProductID , CASE  WHEN ProductName LIKE '%Outdoor%' THEN ProductName ELSE NULL END AS T FROM Products ) WHERE T IS NOT NULL ORDER BY T DESC"
},
{
    "db_id": "regional_sales",
    "question": "Among the sales with 40% discount via in-store channel, how many products were shipped from warehouse code of WARE-NMK1003?",
    "evidence": "40% discount refers to DiscountApplied = 0.4; in-store channel refers to SalesChannel = 'In-Store'; orders refer to OrderNumber;",
    "SQL": "SELECT COUNT(DISTINCT T) FROM ( SELECT CASE  WHEN SalesChannel = 'In-Store' AND WarehouseCode = 'WARE-NMK1003' AND DiscountApplied = '0.4' THEN OrderNumber ELSE NULL END AS T FROM SalesOrders ) WHERE T IS NOT NULL"
},
{
    "db_id": "regional_sales",
    "question": "Mention the most populated city and median income of the store in Florida state.",
    "evidence": "most populated refers to Max(Population);",
    "SQL": "SELECT CityName, MedianIncome FROM StoreLocations WHERE State = 'Florida' ORDER BY Population DESC LIMIT 1"
},
{
    "db_id": "regional_sales",
    "question": "Describe the ID, city and region of the stores which are in Allen country.",
    "evidence": "ID refers to StoreID;",
    "SQL": "SELECT DISTINCT T2.StoreID, T2.CityName, T1.Region FROM Regions AS T1 INNER JOIN StoreLocations AS T2 ON T2.StateCode = T1.StateCode WHERE T2.County = 'Allen County'"
},
{
    "db_id": "regional_sales",
    "question": "List the ID, city, state and region for the store type which is fewer between borough and CDP.",
    "evidence": "COUNT(StoreID) < COUNT(StoreID where Type = 'Borough') < COUNT(StoreID where Type = 'CDP');",
    "SQL": "SELECT DISTINCT T2.StoreID, T2.CityName, T1.State, T2.Type FROM Regions AS T1 INNER JOIN StoreLocations AS T2 ON T2.StateCode = T1.StateCode WHERE T2.Type = 'Borough' OR T2.Type = 'CDP'"
},
{
    "db_id": "regional_sales",
    "question": "Write down the region and name of the sale team ID of 18 and compare their orders between in-store and online.",
    "evidence": "sale team ID of 18 refers to _SalesTeamID = 18; COUNT(OrderNumber where SalesChannel = 'In-Store') > COUNT(OrderNumber where SalesChannel = 'Online');",
    "SQL": "SELECT T2.Region, T2.SalesTeam FROM SalesOrders AS T1 INNER JOIN SalesTeam AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T2.SalesTeamID = 18 AND T1.SalesChannel = 'In-Store' OR T1.SalesChannel = 'Online'"
},
{
    "db_id": "regional_sales",
    "question": "Calculate the percentage of order via in-store channel of customer \"Medline\".",
    "evidence": "Medline is the name of the customer; DIVIDE(COUNT(OrderNumber where SalesChannel = 'In-Store' and CustomerNames = 'Medline'), COUNT(OrderNumber where CustomerNames = 'Medline')) as percentage;",
    "SQL": "SELECT CAST(SUM(CASE WHEN T1.SalesChannel = 'In-Store' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1._CustomerID) FROM SalesOrders AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID WHERE T2.CustomerNames = 'Medline '"
},
{
    "db_id": "regional_sales",
    "question": "Describe the customer names and lasting delivery periods for the product of \"Bedroom Furniture\" by wholesale channel in 2019.",
    "evidence": "delivery period in 2019 means time between placing of an order and the receipt of product and refers to SUBTRACT(DeliveryDate, OrderDate) where SUBSTR(OrderDate, -2 ) = '19'; SalesChannel = 'Wholesale'; ProductName = 'Bedroom Furniture';",
    "SQL": "SELECT T1.CustomerNames, T2.DeliveryDate FROM Customers AS T1 INNER JOIN SalesOrders AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products AS T3 ON T3.ProductID = T2._ProductID WHERE T2.SalesChannel = 'Wholesale' AND T3.ProductName = 'Bedroom Furniture' AND T2.OrderDate LIKE '%/%/19'"
},
{
    "db_id": "regional_sales",
    "question": "Describe the customer names and product names which had over 3800 USD in net profit.",
    "evidence": "over 3800 USD in net profit refers to SUBTRACT(UnitPrice, UnitCost) where Net Profit > 3800;",
    "SQL": "SELECT DISTINCT CustomerNames, ProductName FROM ( SELECT T1.CustomerNames, T3.ProductName , REPLACE(T2.UnitPrice, ',', '') - REPLACE(T2.UnitCost, ',', '') AS T FROM Customers T1 INNER JOIN SalesOrders T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products T3 ON T3.ProductID = T2._ProductID ) WHERE T > 3800"
},
{
    "db_id": "regional_sales",
    "question": "List the store located cities with regions in no water area of California state.",
    "evidence": "cities refer to CityName; no water area refers to WaterArea = 0;",
    "SQL": "SELECT DISTINCT T2.CityName FROM Regions AS T1 INNER JOIN StoreLocations AS T2 ON T2.StateCode = T1.StateCode WHERE T2.State = 'California' AND T2.WaterArea = '0'"
},
{
    "db_id": "regional_sales",
    "question": "Calculate the order percentage by \"Carlos Miller\" sales team.",
    "evidence": "DIVIDE(COUNT(OrderNumber where SalesTeam = 'Carlos Miller'), COUNT(OrderNumber)) as percentage;",
    "SQL": "SELECT CAST(SUM(CASE WHEN T2.SalesTeam = 'Carlos Miller' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.OrderNumber) FROM SalesOrders AS T1 INNER JOIN SalesTeam AS T2 ON T2.SalesTeamID = T1._SalesTeamID"
},
{
    "db_id": "regional_sales",
    "question": "Compare the number of orders between \"Platters\" and \"Serveware\" products.",
    "evidence": "COUNT(OrderNumber where ProductName = 'Platters') > COUNT(OrderNumber where ProductName = 'Serveware');",
    "SQL": "SELECT SUM(CASE WHEN T2.ProductName = 'Platters' THEN 1 ELSE 0 END) AS num1 , SUM(CASE WHEN T2.ProductName = 'Serveware' THEN 1 ELSE 0 END) AS num2 FROM SalesOrders AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID"
},
{
    "db_id": "regional_sales",
    "question": "Calculate the total net profit of the store located in highest median income city.",
    "evidence": "net profit can be computed as SUBTRACT(UnitPrice, UnitCost); highest median income city refers to CityName where MAX(MedianIncome);",
    "SQL": "SELECT SUM(REPLACE(T1.UnitPrice, ',', '') - REPLACE(T1.UnitCost, ',', '')) FROM SalesOrders AS T1 INNER JOIN StoreLocations AS T2 ON T2.StoreID = T1._StoreID ORDER BY T2.MedianIncome DESC LIMIT 1"
},
{
    "db_id": "regional_sales",
    "question": "Among the sales team in South region, write down the numbers of orders made by the sales team ID of one digit.",
    "evidence": "sales team ID of one digit refers to _SalesTeamID BETWEEN 1 AND 9; numbers of orders refer to COUNT(OrderNumber);",
    "SQL": "SELECT COUNT(T1.OrderNumber) FROM SalesOrders AS T1 INNER JOIN SalesTeam AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T2.Region = 'South' AND T2.SalesTeamID BETWEEN 1 AND 9 GROUP BY T2.SalesTeamID HAVING COUNT(T1.OrderNumber)"
},
{
    "db_id": "regional_sales",
    "question": "How many orders have order date in 5/31/2018?",
    "evidence": "orders refer to OrderNumber;",
    "SQL": "SELECT SUM(IIF(OrderDate = '5/31/18', 1, 0)) FROM SalesOrders"
},
{
    "db_id": "regional_sales",
    "question": "List out the name of orders which have delivery date of 6/13/2018.",
    "evidence": "",
    "SQL": "SELECT DISTINCT T FROM ( SELECT IIF(DeliveryDate = '6/13/18', OrderNumber, NULL) AS T FROM SalesOrders ) WHERE T IS NOT NULL"
},
{
    "db_id": "regional_sales",
    "question": "How many orders placed were with more than 5 product quantities?",
    "evidence": "orders refer to OrderNumber; more than 5 product quantities refer to OrderQuantity > 5;",
    "SQL": "SELECT SUM(IIF(OrderQuantity > 5, 1, 0)) FROM SalesOrders"
},
{
    "db_id": "regional_sales",
    "question": "State the full name of state code \"GA\".",
    "evidence": "",
    "SQL": "SELECT T FROM ( SELECT IIF(StateCode = 'GA', State, NULL) AS T FROM Regions ) WHERE T IS NOT NULL"
},
{
    "db_id": "regional_sales",
    "question": "How many states located in the Midwest region?",
    "evidence": "",
    "SQL": "SELECT COUNT(DISTINCT T) FROM ( SELECT CASE  WHEN Region = 'Midwest' THEN StateCode ELSE NULL END AS T FROM Regions ) WHERE T IS NOT NULL"
},
{
    "db_id": "regional_sales",
    "question": "List out the product name of order which has unit cost of 781.22.",
    "evidence": "",
    "SQL": "SELECT T FROM ( SELECT DISTINCT IIF(T1.UnitCost = 781.22, T2.ProductName, NULL) AS T FROM SalesOrders T1 INNER JOIN Products T2 ON T2.ProductID = T1._ProductID ) WHERE T IS NOT NULL"
},
{
    "db_id": "regional_sales",
    "question": "State the delivery date of cookware.",
    "evidence": "Cookware is the name of the product;",
    "SQL": "SELECT T FROM ( SELECT DISTINCT IIF(T2.ProductName = 'Cookware', T1.DeliveryDate, NULL) AS T FROM SalesOrders T1 INNER JOIN Products T2 ON T2.ProductID = T1._ProductID ) WHERE T IS NOT NULL"
},
{
    "db_id": "regional_sales",
    "question": "How many furniture cushions orders which have date of order in 2018?",
    "evidence": "furniture cushions orders refer to OrderNumber where ProductName = 'Furniture Cushions'; date of order in 2018 refers to SUBSTR(OrderDate, -2) = '18'",
    "SQL": "SELECT SUM(CASE WHEN T1.OrderDate LIKE '%/%/18' AND T2.ProductName = 'Furniture Cushions' THEN 1 ELSE 0 END) FROM SalesOrders AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID"
},
{
    "db_id": "regional_sales",
    "question": "List out the name of products which have been applied 10% discount.",
    "evidence": "applied 10% discount refers to DiscountApplied = 0.1;",
    "SQL": "SELECT T FROM ( SELECT DISTINCT IIF(T1.DiscountApplied = 0.1, T2.ProductName, NULL) AS T FROM SalesOrders T1 INNER JOIN Products T2 ON T2.ProductID = T1._ProductID ) WHERE T IS NOT NULL"
},
{
    "db_id": "regional_sales",
    "question": "Calculate the average net profit of phones which have sales channel of distributor.",
    "evidence": "net profit can be computed as SUBTRACT(UnitPrice, UnitCost); AVG(net profit) where ProductName = 'Phones' and SalesChannel = 'Distributor';",
    "SQL": "SELECT SUM(REPLACE(T1.UnitPrice, ',', '') - REPLACE(T1.UnitCost, ',', '')) / COUNT(T1.OrderNumber) FROM SalesOrders AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T2.ProductName = 'Phones' AND T1.SalesChannel = 'Distributor'"
},
{
    "db_id": "regional_sales",
    "question": "Calculate the average net profit of bar tools which has ordered quantity exceed 5.",
    "evidence": "net profit can be computed as SUBTRACT(UnitPrice, UnitCost); AVG(net profit) where ProductName = 'Bar Tools' and OrderQuantity > 5;",
    "SQL": "SELECT SUM(REPLACE(T1.UnitPrice, ',', '') - REPLACE(T1.UnitCost, ',', '')) / COUNT(T1.OrderNumber) FROM SalesOrders AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T2.ProductName = 'Bar Tools' AND T1.OrderQuantity > 5"
},
{
    "db_id": "regional_sales",
    "question": "List out the city name of states located in South region.",
    "evidence": "",
    "SQL": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T1.Region = 'South' THEN T2.CityName END AS T FROM Regions T1 INNER JOIN StoreLocations T2 ON T2.StateCode = T1.StateCode ) WHERE T IS NOT NULL"
},
{
    "db_id": "regional_sales",
    "question": "What is the region of stores which have type of \"Town\" in the list?",
    "evidence": "",
    "SQL": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.Type = 'Town' THEN T1.Region END AS T FROM Regions T1 INNER JOIN StoreLocations T2 ON T2.StateCode = T1.StateCode ) WHERE T IS NOT NULL"
},
{
    "db_id": "regional_sales",
    "question": "How many orders that Medsep Group had made?",
    "evidence": "Medsep Group is the name of the customer; orders refer to OrderNumber;",
    "SQL": "SELECT SUM(CASE WHEN T1.CustomerNames = 'Medsep Group' THEN 1 ELSE 0 END) FROM Customers AS T1 INNER JOIN SalesOrders AS T2 ON T2._CustomerID = T1.CustomerID"
},
{
    "db_id": "regional_sales",
    "question": "List out the discount levels applied for all orders from Ole Group.",
    "evidence": "Ole Group is the name of the customer; discount levels applied refer to DiscountApplied NOT NULL;",
    "SQL": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T1.CustomerNames = 'Ole Group' THEN T2.DiscountApplied END AS T FROM Customers T1 INNER JOIN SalesOrders T2 ON T2._CustomerID = T1.CustomerID ) WHERE T IS NOT NULL"
},
{
    "db_id": "regional_sales",
    "question": "State the customer name of orders which has shipped date in 7/8/2018.",
    "evidence": "shipped date in 7/8/2018 refers to ShipDate = '7/8/18'",
    "SQL": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.ShipDate = '7/8/18' THEN T1.CustomerNames END AS T FROM Customers T1 INNER JOIN SalesOrders T2 ON T2._CustomerID = T1.CustomerID ) WHERE T IS NOT NULL"
},
{
    "db_id": "regional_sales",
    "question": "Among the orders placed by Ei, how many orders have quantity greater than 4?",
    "evidence": "Ei is the name of the customer; orders have quantity greater than 4 refer to OrderNumber WHERE OrderQuantity > 4;",
    "SQL": "SELECT SUM(CASE WHEN T1.OrderQuantity > 4 AND T2.CustomerNames = 'Ei ' THEN 1 ELSE 0 END) FROM SalesOrders AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID"
},
{
    "db_id": "regional_sales",
    "question": "Among the orders placed by Pacific Ltd, how many orders have been applied 5% discount ?",
    "evidence": "orders by Pacific Ltd refer to OrderNumber where CustomerNames = 'Pacific Ltd'; applied 5% discount refers to DiscountApplied = 0.05;",
    "SQL": "SELECT SUM(CASE WHEN T1.DiscountApplied = 0.05 AND T2.CustomerNames = 'Pacific Ltd' THEN 1 ELSE 0 END) FROM SalesOrders AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID"
},
{
    "db_id": "regional_sales",
    "question": "What is the customer names of orders which have unit cost greater than 4000USD?",
    "evidence": "unit cost greater than 4000USD refers to UnitCost > 4000;",
    "SQL": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.UnitCost > 4000 THEN T1.CustomerNames END AS T FROM Customers T1 INNER JOIN SalesOrders T2 ON T2._CustomerID = T1.CustomerID ) WHERE T IS NOT NULL"
},
{
    "db_id": "regional_sales",
    "question": "Please list the id and detailed position of all stores in Birmingham city.",
    "evidence": "Latitude and Longitude coordinates can be used to identify the detailed position of stores; id refers to StoreID;",
    "SQL": "SELECT StoreID, Latitude, Longitude FROM StoreLocations WHERE CityName = 'Birmingham'"
},
{
    "db_id": "regional_sales",
    "question": "Which city has the largest population?",
    "evidence": "city has the largest population refers to CityName where MAX(Population);",
    "SQL": "SELECT CityName FROM StoreLocations ORDER BY Population DESC LIMIT 1"
},
{
    "db_id": "regional_sales",
    "question": "How many CDP stores are there in California?",
    "evidence": "California is a state; CDP stores refer to StoreID where Type = 'CDP';",
    "SQL": "SELECT SUM(CASE WHEN State = 'California' AND Type = 'CDP' THEN 1 ELSE 0 END) FROM StoreLocations"
},
{
    "db_id": "regional_sales",
    "question": "Please give the order number and product name of the order which has the lowest unit price.",
    "evidence": "the lowest unit price refers to MIN(UnitPrice);",
    "SQL": "SELECT T1.OrderNumber, T2.ProductName FROM SalesOrders AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE REPLACE(T1.UnitPrice, ',', '') = ( SELECT REPLACE(T1.UnitPrice, ',', '') FROM SalesOrders AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID ORDER BY REPLACE(T1.UnitPrice, ',', '') LIMIT 1 )"
},
{
    "db_id": "regional_sales",
    "question": "Which product has the highest net profit in 2019?",
    "evidence": "net profit can be computed as SUBTRACT(UnitPrice, UnitCost); the highest net profit in 2019 refers to MAX(Net Profit) where OrderDate LIKE '%/19'; product refers to ProductName;",
    "SQL": "SELECT T2.ProductName FROM SalesOrders AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T1.OrderDate LIKE '%/%/19' ORDER BY REPLACE(T1.UnitPrice, ',', '') - REPLACE(T1.UnitCost, ',', '') DESC LIMIT 1"
},
{
    "db_id": "regional_sales",
    "question": "What is the average unit price of a Cookware product?",
    "evidence": "AVG(UnitPrice where ProductName = 'Cookware');",
    "SQL": "SELECT AVG(REPLACE(T1.UnitPrice, ',', '')) FROM SalesOrders AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T2.ProductName = 'Cookware'"
},
{
    "db_id": "regional_sales",
    "question": "Please list all sale team names which had orders on 5/31/2018.",
    "evidence": "had orders on 5/31/2018 refer to OrderDate = '5/31/18'; sale team names refer to SalesTeam;",
    "SQL": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T1.OrderDate = '5/31/18' THEN T2.SalesTeam ELSE NULL END AS T FROM SalesOrders T1 INNER JOIN SalesTeam T2 ON T2.SalesTeamID = T1._SalesTeamID ) WHERE T IS NOT NULL"
},
{
    "db_id": "regional_sales",
    "question": "Which sales team name has the least orders in 2019?",
    "evidence": "sale team names refer to SalesTeam; the least orders in 2019 refer to MIN(COUNT(OrderNumber where SUBSTR(OrderDate, -2) = '19'));",
    "SQL": "SELECT T2.SalesTeam FROM SalesOrders AS T1 INNER JOIN SalesTeam AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T1.OrderDate LIKE '%/%/19' GROUP BY T2.SalesTeam ORDER BY COUNT(T1.OrderNumber) ASC LIMIT 1"
},
{
    "db_id": "regional_sales",
    "question": "From 2018 to 2020, which year did the George Lewis group have the highest number of orders?",
    "evidence": "George Lewis refers to SalesTeam; the highest number of orders refers to MAX(COUNT(OrderNumber)); which year from 2018 to 2020 refers to SUBSTR(OrderDate, -2) IN ('18', '19', '20') GROUP BY SUBSTR(OrderDate, -2);",
    "SQL": "SELECT SUBSTR(T1.OrderDate, -2, 2) FROM SalesOrders AS T1 INNER JOIN SalesTeam AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T2.SalesTeam = 'George Lewis' GROUP BY SUBSTR(T1.OrderDate, -2, 2) ORDER BY COUNT(T1.OrderNumber) DESC LIMIT 1"
},
{
    "db_id": "regional_sales",
    "question": "What is the percentage of total orders from stores in Orange County in 2018?",
    "evidence": "DIVIDE(COUNT(OrderNumber where County = 'Orange County' and SUBSTR(OrderDate, -2) = '18'), COUNT(OrderNumber where SUBSTR(OrderDate, -2) = '18')) as percentage;",
    "SQL": "SELECT CAST(SUM(CASE WHEN T2.County = 'Orange County' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.OrderNumber) FROM SalesOrders AS T1 INNER JOIN StoreLocations AS T2 ON T2.StoreID = T1._StoreID WHERE T1.OrderDate LIKE '%/%/18'"
},
{
    "db_id": "regional_sales",
    "question": "Which order number has the highest unit price?",
    "evidence": "the highest unit price refers to MAX(UnitPrice);",
    "SQL": "SELECT OrderNumber FROM SalesOrders WHERE REPLACE(UnitPrice, ',', '') = ( SELECT REPLACE(UnitPrice, ',', '') FROM SalesOrders ORDER BY REPLACE(UnitPrice, ',', '') DESC LIMIT 1 )"
},
{
    "db_id": "regional_sales",
    "question": "Which sales team id has the highest number of orders in 2018?",
    "evidence": "the highest number of orders in 2018 refers to MAX(COUNT(OrderNumber where SUBSTR(OrderDate, -2) = '18'));",
    "SQL": "SELECT _SalesTeamID FROM SalesOrders WHERE OrderDate LIKE '%/%/18' GROUP BY _SalesTeamID ORDER BY COUNT(_SalesTeamID) DESC LIMIT 1"
},
{
    "db_id": "regional_sales",
    "question": "What is the unit cost of order SO - 000103?",
    "evidence": "OrderNumber = 'SO - 000103';",
    "SQL": "SELECT DISTINCT T FROM ( SELECT IIF(OrderNumber = 'SO - 000103', UnitCost, NULL) AS T FROM SalesOrders ) WHERE T IS NOT NULL"
},
{
    "db_id": "regional_sales",
    "question": "In 2020, what were the total orders of all stores in Maricopa County?",
    "evidence": "total orders refer to COUNT(OrderNumber); 2020 refers to SUBSTR(OrderDate, -2) = '20';",
    "SQL": "SELECT SUM(CASE WHEN T2.County = 'Maricopa County' AND OrderDate LIKE '%/%/20' THEN 1 ELSE 0 END) FROM SalesOrders AS T1 INNER JOIN StoreLocations AS T2 ON T2.StoreID = T1._StoreID"
},
{
    "db_id": "regional_sales",
    "question": "What is the detailed position of the store which has order SO - 000115?",
    "evidence": "Latitude and Longitude coordinates can be used to identify the detailed position of stores; store refers to StoreID WHERE OrderNumber = 'SO - 000115';",
    "SQL": "SELECT T2.Latitude, T2.Longitude FROM SalesOrders AS T1 INNER JOIN StoreLocations AS T2 ON T2.StoreID = T1._StoreID WHERE T1.OrderNumber = 'SO - 000115'"
},
{
    "db_id": "regional_sales",
    "question": "Please calculate the total number of orders by each city in 2019.",
    "evidence": "total number of orders refers to COUNT(OrderNumber); 2019 refers to OrderDate between 01-01-2019 and 31-12-2019; city refers to CityName;",
    "SQL": "SELECT COUNT(T1.OrderNumber) FROM SalesOrders AS T1 INNER JOIN StoreLocations AS T2 ON T2.StoreID = T1._StoreID WHERE T1.OrderDate LIKE '%/%/19' GROUP BY T2.CityName HAVING COUNT(T1.OrderNumber)"
},
{
    "db_id": "regional_sales",
    "question": "Please list the names of customers who have total orders of over 3 in 2018.",
    "evidence": "total orders of over 3 in 2018 refer to COUNT(OrderNumber) > 3 where SUBSTR(OrderDate, -2) = '18';",
    "SQL": "SELECT DISTINCT IIF(COUNT(T2.CustomerID) > 3, T2.CustomerNames, NULL) FROM SalesOrders AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID WHERE T1.OrderDate LIKE '%/%/18' GROUP BY T1._CustomerID HAVING COUNT(T2.CustomerID)"
},
{
    "db_id": "regional_sales",
    "question": "What were the total orders of Medsep Group from 2018 to 2020?",
    "evidence": "Medsep Group is the name of the customer; total orders refer to COUNT(OrderNumber); from 2018 to 2020 refers to SUBSTR(OrderDate, -2) IN ('18', '19', '20');",
    "SQL": "SELECT SUM(CASE WHEN SUBSTR(T1.OrderDate, -2) IN ('18', '19', '20') AND T2.CustomerNames = 'Medsep Group' THEN 1 ELSE 0 END) FROM SalesOrders AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID"
},
{
    "db_id": "regional_sales",
    "question": "Please list the customer names whose order quantity was more than 5 on 6/1/2018.",
    "evidence": "order quantity was more than 5 on 6/1/2018 refers to OrderQuantity > 5 where OrderDate = 6/1/2018;",
    "SQL": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN SUM(T1.OrderQuantity) > 5 THEN T2.CustomerNames END AS T FROM SalesOrders T1 INNER JOIN Customers T2 ON T2.CustomerID = T1._CustomerID WHERE T1.OrderDate = '6/1/18' GROUP BY T1._CustomerID ) WHERE T IS NOT NULL"
},
{
    "db_id": "regional_sales",
    "question": "What is the percentage of total orders of Stephen Payne that had a net profit of over 1000?",
    "evidence": "SalesTeam = 'Stephen Payne'; net profit can be computed as SUBTRACT(UnitPrice, UnitCost); DIVIDE(COUNT(OrderNumber where SalesTeam = 'Stephen Payne' and Net Profit > 1000)), (COUNT(OrderNumber where SalesTeam = 'Stephen Payne')) as percentage;",
    "SQL": "SELECT CAST(SUM(CASE WHEN REPLACE(T1.UnitPrice, ',', '') - REPLACE(T1.UnitCost, ',', '') > 1000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.OrderNumber) FROM SalesOrders AS T1 INNER JOIN SalesTeam AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T2.SalesTeam = 'Stephen Payne'"
},
{
    "db_id": "regional_sales",
    "question": "How many sales team were from Northeast?",
    "evidence": "Northeast is the name of the region;",
    "SQL": "SELECT SUM(CASE WHEN Region = 'Northeast' THEN 1 ELSE 0 END) FROM SalesTeam"
},
{
    "db_id": "regional_sales",
    "question": "State the name of all city in Maricopa County along with its latitude and longitude.",
    "evidence": "",
    "SQL": "SELECT DISTINCT CityName, Latitude, Longitude FROM StoreLocations WHERE County = 'Maricopa County'"
},
{
    "db_id": "regional_sales",
    "question": "Which order have the highest unit cost?",
    "evidence": "order have the highest unit cost refers to OrderNumber where MAX(UnitCost);",
    "SQL": "SELECT OrderNumber FROM SalesOrders WHERE REPLACE(UnitCost, ',', '') = ( SELECT REPLACE(UnitCost, ',', '') FROM SalesOrders ORDER BY REPLACE(UnitCost, ',', '') DESC LIMIT 1 )"
},
{
    "db_id": "regional_sales",
    "question": "List all the name of products with the ID of 30 to 40.",
    "evidence": "products with the ID of 30 to 40 refer to ProductName WHERE ProductID BETWEEN 30 AND 40;",
    "SQL": "SELECT T FROM ( SELECT CASE  WHEN ProductID BETWEEN 30 AND 40 THEN ProductName ELSE NULL END AS T FROM Products ) WHERE T IS NOT NULL"
},
{
    "db_id": "regional_sales",
    "question": "Calculate ratio between the highest unit cost and the lowest unit cost?",
    "evidence": "ratio can be calculated as DIVIDE(MAX(Unit_Cost)), MIN(UnitCost);",
    "SQL": "SELECT ( SELECT REPLACE(UnitCost, ',', '') FROM SalesOrders WHERE REPLACE(UnitCost, ',', '') = ( SELECT REPLACE(UnitCost, ',', '') FROM SalesOrders ORDER BY REPLACE(UnitCost, ',', '') DESC LIMIT 1 ) ORDER BY REPLACE(UnitCost, ',', '') DESC LIMIT 1 ) / ( SELECT REPLACE(UnitCost, ',', '') FROM SalesOrders WHERE REPLACE(UnitCost, ',', '') = ( SELECT REPLACE(UnitCost, ',', '') FROM SalesOrders ORDER BY REPLACE(UnitCost, ',', '') ASC LIMIT 1 ) ORDER BY REPLACE(UnitCost, ',', '') ASC LIMIT 1 )"
},
{
    "db_id": "regional_sales",
    "question": "Which product was ordered the most in 2018?",
    "evidence": "product refers to ProductName; ordered the most in 2018 refers to MAX(COUNT(OrderNumber)) where SUBSTR(OrderDate, -2) = '18';",
    "SQL": "SELECT T2.ProductName FROM SalesOrders AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T1.OrderDate LIKE '%/%/18' GROUP BY T1._ProductID ORDER BY COUNT(T1._ProductID) DESC LIMIT 1"
},
{
    "db_id": "regional_sales",
    "question": "How many products sold by Adam Hernandez?",
    "evidence": "products sold by Adam Hernandez refer to SUM(OrderQuantity where SalesTeam = 'Adam Hernandez');",
    "SQL": "SELECT SUM(CASE WHEN T2.SalesTeam = 'Adam Hernandez' THEN 1 ELSE 0 END) FROM SalesOrders AS T1 INNER JOIN SalesTeam AS T2 ON T2.SalesTeamID = T1._SalesTeamID"
},
{
    "db_id": "regional_sales",
    "question": "List all orders where its products were shipped from Daly City.",
    "evidence": "shipped from Daly City refers to StoreLocations where CityName = 'Daly City'; orders refer to OrderNumber;",
    "SQL": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.CityName = 'Daly City' THEN T1.OrderNumber END AS T FROM SalesOrders T1 INNER JOIN StoreLocations T2 ON T2.StoreID = T1._StoreID ) WHERE T IS NOT NULL"
},
{
    "db_id": "regional_sales",
    "question": "How many orders made by Rochester Ltd?",
    "evidence": "Rochester Ltd is the name of the customer; orders refer to OrderNumber;",
    "SQL": "SELECT SUM(CASE WHEN T1.CustomerNames = 'Rochester Ltd' THEN 1 ELSE 0 END) FROM Customers AS T1 INNER JOIN SalesOrders AS T2 ON T2._CustomerID = T1.CustomerID"
},
{
    "db_id": "regional_sales",
    "question": "State the order number where Qualitest ordered the highest product quantity.",
    "evidence": "Qualitest ordered the highest product quantity refers to CustomerNames where MAX(OrderQuantity);",
    "SQL": "SELECT T1.OrderNumber FROM SalesOrders AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID WHERE T2.CustomerNames = 'Qualitest ' ORDER BY T1.OrderQuantity DESC LIMIT 1"
},
{
    "db_id": "regional_sales",
    "question": "List the order for all in-store sales along with the products sold.",
    "evidence": "orders for all in-store sales refer to OrderNumber where SalesChannel = 'In-Store'; products refer to ProductName;",
    "SQL": "SELECT DISTINCT T1.OrderNumber, T2.ProductName FROM SalesOrders AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T1.SalesChannel = 'In-Store'"
},
{
    "db_id": "regional_sales",
    "question": "How many online sales were made in May 2018 where products were shipped from Norman?",
    "evidence": "online sales refer to OrderNumber where SalesChannel = 'Online'; May 2018 refers to OrderDate LIKE '5/%/18'; Norman is the name of the city;",
    "SQL": "SELECT SUM(CASE WHEN T1.OrderDate LIKE '5/%/18' AND T1.SalesChannel = 'Online' AND T2.CityName = 'Norman' THEN 1 ELSE 0 END) FROM SalesOrders AS T1 INNER JOIN StoreLocations AS T2 ON T2.StoreID = T1._StoreID"
},
{
    "db_id": "regional_sales",
    "question": "Among the products sold in Maricopa County, which was the least sold?",
    "evidence": "the least sold product refers to ProductName where MIN(OrderQuantity);",
    "SQL": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN SalesOrders AS T2 ON T2._ProductID = T1.ProductID INNER JOIN StoreLocations AS T3 ON T3.StoreID = T2._StoreID WHERE T3.County = 'Maricopa County' ORDER BY T2.OrderQuantity ASC LIMIT 1"
},
{
    "db_id": "regional_sales",
    "question": "State all the order numbers for sales team of Samuel Fowler.",
    "evidence": "",
    "SQL": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.SalesTeam = 'Samuel Fowler' THEN T1.OrderNumber ELSE NULL END AS T FROM SalesOrders T1 INNER JOIN SalesTeam T2 ON T2.SalesTeamID = T1._SalesTeamID ) WHERE T IS NOT NULL"
},
{
    "db_id": "regional_sales",
    "question": "Find the number of baseball ordered in December 2017.",
    "evidence": "ProductName = 'Baseball'; December 2017 refers to OrderDate LIKE '12/%/17';",
    "SQL": "SELECT COUNT(T2.OrderNumber) FROM Products AS T1 INNER JOIN SalesOrders AS T2 ON T2._ProductID = T1.ProductID WHERE T1.ProductName = 'Baseball' AND T2.OrderDate LIKE '12/%/18'"
},
{
    "db_id": "regional_sales",
    "question": "Find the average number of ornaments sold each month in 2018.",
    "evidence": "DIVIDE(SUM(OrderQuantity where ProductName = 'Ornaments' and OrderDate LIKE '%/18'), 12);",
    "SQL": "SELECT CAST(SUM(T2.OrderQuantity) AS REAL) / 12 FROM Products AS T1 INNER JOIN SalesOrders AS T2 ON T2._ProductID = T1.ProductID WHERE T1.ProductName = 'Ornaments' AND T2.OrderDate LIKE '%/%/18'"
},
{
    "db_id": "regional_sales",
    "question": "Find the percentage of products that were shipped from Burbank in 2018?",
    "evidence": "DIVIDE(SUM(OrderQuantity where CityName = 'Burbank' and SUBSTR(OrderDate, -2) = '18')), (SUM(OrderQuantity where SUBSTR(OrderDate, -2) = '18')) as percentage;",
    "SQL": "SELECT CAST(SUM(CASE WHEN T3.CityName = 'Burbank' THEN T2.OrderQuantity ELSE 0 END) AS REAL) * 100 / SUM(T2.OrderQuantity) FROM Products AS T1 INNER JOIN SalesOrders AS T2 ON T2._ProductID = T1.ProductID INNER JOIN StoreLocations AS T3 ON T3.StoreID = T2._StoreID WHERE T2.OrderDate LIKE '%/%/18'"
},
{
    "db_id": "regional_sales",
    "question": "What is the difference in order number from \"WARE-MKL1006\" and \"WARE-NBV1002\"?",
    "evidence": "\"WARE-NBV1002\" and \"WARE-MKL1006\" are both WarehouseCode; difference in order number = Subtract(Count(OrderNumber where WarehouseCode = 'WARE-MKL1006'), Count(OrderNumber where WarehouseCode = 'WARE-NBV1002'))",
    "SQL": "SELECT SUM(IIF(WarehouseCode = 'WARE-MKL1006', 1, 0)) - SUM(IIF(WarehouseCode = 'WARE-NBV1002', 1, 0)) AS difference FROM SalesOrders"
},
{
    "db_id": "regional_sales",
    "question": "Describe the product names delivered in 2021 for the customer \"Sundial\".",
    "evidence": "delivered in 2021 refer to DeliveryDate LIKE '%/21'; 'Sundial' is the CustomerNames",
    "SQL": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.DeliveryDate LIKE '%/%/21' AND T1.CustomerNames = 'Sundial ' THEN T3.ProductName END AS T FROM Customers T1 INNER JOIN SalesOrders T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products T3 ON T3.ProductID = T2._ProductID ) WHERE T IS NOT NULL"
},
{
    "db_id": "regional_sales",
    "question": "Write down the store IDs and region of the state \"Michigan\".",
    "evidence": "\"Michigan\" is the State",
    "SQL": "SELECT DISTINCT T2.StoreID, T1.Region FROM Regions AS T1 INNER JOIN StoreLocations AS T2 ON T2.StateCode = T1.StateCode WHERE T2.State = 'Michigan'"
},
{
    "db_id": "regional_sales",
    "question": "Compare the total number of orders between customer \"Apollo Ltd\" and \"Pacific Ltd\".",
    "evidence": "\"Apollo Ltd\" and \"Pacific Ltd\" are both CustomerNames; total number of orders refers to COUNT(OrderNumber)",
    "SQL": "SELECT SUM(CASE WHEN T2.CustomerNames = 'Apollo Ltd' THEN 1 ELSE 0 END), SUM(CASE WHEN T2.CustomerNames = 'Pacific Ltd' THEN 1 ELSE 0 END) FROM SalesOrders AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID"
},
{
    "db_id": "regional_sales",
    "question": "Find the store ID with more orders between \"Aurora\" and \"Babylon\" city.",
    "evidence": "\"Aurora\" refers to CityName = 'Aurora (Township)'; \"Babylon\" refers to CityName = 'Babylong (Town)'; more order refers to Max(Count(OrderNumber))",
    "SQL": "SELECT T2.StoreID FROM SalesOrders AS T1 INNER JOIN StoreLocations AS T2 ON T2.StoreID = T1._StoreID WHERE T2.CityName = 'Aurora (Township)' OR T2.CityName = 'Babylon (Town)' GROUP BY T2.StoreID ORDER BY COUNT(T1.OrderNumber) DESC LIMIT 1"
},
{
    "db_id": "regional_sales",
    "question": "List down the customer names and product names of the order made by \"Anthony Torres\" via distributor channel.",
    "evidence": "\"Anthony Torres\" is the name of SalesTeam; distributor channel refers to SalesChannel = 'Distributor'",
    "SQL": "SELECT DISTINCT T1.CustomerNames, T4.ProductName FROM Customers AS T1 INNER JOIN SalesOrders AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN SalesTeam AS T3 ON T3.SalesTeamID = T2._SalesTeamID INNER JOIN Products AS T4 ON T4.ProductID = T2._ProductID WHERE T3.SalesTeam = 'Anthony Torres' AND T2.SalesChannel = 'Distributor'"
},
{
    "db_id": "regional_sales",
    "question": "Mention the customer names and IDs which ordered total net profit of above 5000 USD through online channel.",
    "evidence": "IDs refers to CustomerID; total net profit of above 5000 USD refers to SUM(Subtract(UnitPrice, UnitCost)) > 5000",
    "SQL": "SELECT DISTINCT CustomerNames, CustomerID FROM ( SELECT T2.CustomerNames, T2.CustomerID , SUM(REPLACE(T1.UnitPrice, ',', '') - REPLACE(T1.UnitCost, ',', '')) AS T FROM SalesOrders T1 INNER JOIN Customers T2 ON T2.CustomerID = T1._CustomerID WHERE T1.SalesChannel = 'Online' GROUP BY T2.CustomerID ) WHERE T > 5000"
},
{
    "db_id": "regional_sales",
    "question": "Find the net profit of the floral products which were delivered in 2021.",
    "evidence": "floral product refers to ProductName = 'Floral'; total net profit = SUM(Subtract(UnitPrice, UnitCost)); delivered in 2021 refers to DeliveryDate LIKE '%/21'",
    "SQL": "SELECT SUM(REPLACE(T1.UnitPrice, ',', '') - REPLACE(T1.UnitCost, ',', '')) FROM SalesOrders AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T1.DeliveryDate LIKE '%/%/21' AND T2.ProductName = 'Floral'"
},
{
    "db_id": "regional_sales",
    "question": "Count the number of orders made from the store in city with population of 3000000 to 4000000.",
    "evidence": "number of order refers to OrderNumber; population of 3000000 to 4000000 refers to Population BETWEEN 3000000 AND 4000000",
    "SQL": "SELECT COUNT(T1.OrderNumber) FROM SalesOrders AS T1 INNER JOIN StoreLocations AS T2 ON T2.StoreID = T1._StoreID WHERE T2.Population BETWEEN 3000000 AND 4000000"
},
{
    "db_id": "regional_sales",
    "question": "Name the products via wholesale channel of the store under Pacific/Honolulu time zone.",
    "evidence": "products refers to ProductName; via wholesale channel refers to SalesChannel = 'Wholesale'",
    "SQL": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T3.TimeZone = 'Pacific/Honolulu' AND T2.SalesChannel = 'Wholesale' THEN T1.ProductName ELSE NULL END AS T FROM Products T1 INNER JOIN SalesOrders T2 ON T2._ProductID = T1.ProductID INNER JOIN StoreLocations T3 ON T3.StoreID = T2._StoreID ) WHERE T IS NOT NULL"
},
{
    "db_id": "regional_sales",
    "question": "List the order numbers and product names which were ordered on 6th June, 2018.",
    "evidence": "ordered on 6th June 2018 refers to OrderDate = '6/5/18'",
    "SQL": "SELECT DISTINCT OrderNumber, ProductName FROM ( SELECT IIF(T2.OrderDate = '6/6/18', T2.OrderNumber, NULL) AS \"OrderNumber\" , IIF(T2.OrderDate = '6/6/18', T1.ProductName, NULL) AS \"ProductName\" FROM Products T1 INNER JOIN SalesOrders T2 ON T2._ProductID = T1.ProductID ) WHERE OrderNumber IS NOT NULL AND ProductName IS NOT NULL"
},
{
    "db_id": "regional_sales",
    "question": "Find the average yearly order by customer Weimei Corp for 2018, 2019 and 2020.",
    "evidence": "\"Weimei Corp\" is the CustomerNames; in 2018, 2019 and 2020 refers to SUBSTR (OrderDate, -2) IN ('18', '19', '20') : Average order = Divide (Count (OrderNumber), 3)",
    "SQL": "SELECT COUNT(T1.OrderNumber) / 3 FROM SalesOrders AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID WHERE (T1.OrderDate LIKE '%/%/18' AND T2.CustomerNames = 'Weimei Corp') OR (T1.OrderDate LIKE '%/%/19' AND T2.CustomerNames = 'Weimei Corp') OR (T1.OrderDate LIKE '%/%/20' AND T2.CustomerNames = 'Weimei Corp')"
},
{
    "db_id": "regional_sales",
    "question": "Calculate the average monthly order and percentage of warehouse \"WARE-NMK1003\" in 2019. Among them, mention number of orders for floor lamps.",
    "evidence": "\"WARE-NMK1003\" is the WarehouseCode; in 2019 refers to SUBSTR(OrderDate, -2) = '19'; average = Divide (Count (OrderNumber where SUBSTR(OrderDate, -2) = '19'), 12); Percentage = Divide (Count(OrderNumber where WarehouseCode = 'WARE-NMK1003'), Count(OrderNumber)) * 100; 'Floor Lamps' is the ProductName; number of orders refers to Count(OrderNumber)",
    "SQL": "SELECT CAST(SUM(CASE WHEN T2.WarehouseCode = 'WARE-NMK1003' THEN 1 ELSE 0 END) AS REAL) / 12 , CAST(SUM(CASE WHEN T2.WarehouseCode = 'WARE-NMK1003' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.OrderNumber), COUNT(CASE WHEN T1.ProductName = 'Floor Lamps' AND T2.WarehouseCode = 'WARE-NMK1003' THEN T2.OrderQuantity ELSE NULL END) FROM Products AS T1 INNER JOIN SalesOrders AS T2 ON T2._ProductID = T1.ProductID WHERE T2.OrderDate LIKE '%/%/19'"
},
{
    "db_id": "regional_sales",
    "question": "Indicate the procured dates for the customer whose ID is 11.",
    "evidence": "ID is 11 refers to _CustomerID = 11;",
    "SQL": "SELECT DISTINCT T FROM ( SELECT IIF(_CustomerID = 11, ProcuredDate, NULL) AS T FROM SalesOrders ) WHERE T IS NOT NULL"
},
{
    "db_id": "regional_sales",
    "question": "How many orders through distributor were for the minimum quantity?",
    "evidence": "\"Distributor\" is the SalesChannel; minimum quantity refers to Min(OrderQuantity)",
    "SQL": "SELECT SUM(CASE WHEN OrderQuantity = 1 AND SalesChannel = 'Distributor' THEN 1 ELSE 0 END) FROM SalesOrders"
},
{
    "db_id": "regional_sales",
    "question": "List by ID all sales teams that have sold products at a 10% discount in store.",
    "evidence": "ID refers to _SalesTeamID; 10% discount refers to DiscountApplied = 0.1; 'In-Store' is the SalesChannel",
    "SQL": "SELECT DISTINCT T FROM ( SELECT CASE  WHEN DiscountApplied = '0.1' AND SalesChannel = 'In-Store' THEN _SalesTeamID ELSE NULL END AS T FROM SalesOrders ) WHERE T IS NOT NULL"
},
{
    "db_id": "regional_sales",
    "question": "How many Borough-type stores located in the city of Brooklyn have a population of less than 3 million?",
    "evidence": "\"Brooklyn\" is the CityName; population of less than 3 million refers to Population < 3000000",
    "SQL": "SELECT SUM(CASE WHEN Population < 3000000 AND Type = 'Borough' AND CityName = 'Brooklyn' THEN 1 ELSE 0 END) FROM StoreLocations"
},
{
    "db_id": "regional_sales",
    "question": "How many states are in the Midwest region?",
    "evidence": "",
    "SQL": "SELECT COUNT(DISTINCT T) FROM ( SELECT CASE  WHEN Region = 'Midwest' THEN State ELSE NULL END AS T FROM Regions ) WHERE T IS NOT NULL"
},
{
    "db_id": "regional_sales",
    "question": "What are the top 10 products with the highest net profit?",
    "evidence": "products refers to ProductName; highest net profit = Max(Subtract(UnitPrice, UnitCost))",
    "SQL": "SELECT T2.ProductName FROM SalesOrders AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID GROUP BY T1._ProductID ORDER BY SUM(REPLACE(T1.UnitPrice, ',', '') - REPLACE(T1.UnitCost, ',', '')) DESC LIMIT 10"
},
{
    "db_id": "regional_sales",
    "question": "Indicate the name of the customers who have placed an order of 3 units in February 2018.",
    "evidence": "name of customer refers to CustomerNames; order of 3 unit refers to OrderQuantity = 3; in February 2018 refers to OrderDate LIKE '2/%/18'",
    "SQL": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.OrderQuantity = 3 AND T2.OrderDate LIKE '2/%/18' THEN T1.CustomerNames END AS T FROM Customers T1 INNER JOIN SalesOrders T2 ON T2._CustomerID = T1.CustomerID ) WHERE T IS NOT NULL"
},
{
    "db_id": "regional_sales",
    "question": "What are the names of the sales teams that have served to customer Apotheca, Ltd?",
    "evidence": "name of sales team refers to SalesTeam; 'Apotheca, Ltd' is the CustomerNames",
    "SQL": "SELECT DISTINCT T3.SalesTeam FROM Customers AS T1 INNER JOIN SalesOrders AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN SalesTeam AS T3 ON T3.SalesTeamID = T2._SalesTeamID WHERE T1.CustomerNames = 'Apotheca, Ltd'"
},
{
    "db_id": "regional_sales",
    "question": "In which regions are the stores that have shipped products through the WARE-UHY1004 warehouse?",
    "evidence": "\"WARE-UHY1004\" is the WarehouseCode",
    "SQL": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T3.WarehouseCode = 'WARE-UHY1004' THEN T1.Region END AS T FROM Regions T1 INNER JOIN StoreLocations T2 ON T2.StateCode = T1.StateCode INNER JOIN SalesOrders T3 ON T3._StoreID = T2.StoreID ) WHERE T IS NOT NULL"
},
{
    "db_id": "regional_sales",
    "question": "List all the cities where Shawn Torres sells Audio products.",
    "evidence": "\"Shawn Torres\" is the name of SalesTeam; Audio product refers to ProductName = 'Audio'",
    "SQL": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T4.ProductName = 'Audio' AND T3.SalesTeam = 'Shawn Torres' THEN T1.CityName ELSE NULL END AS T FROM StoreLocations T1 INNER JOIN SalesOrders T2 ON T2._StoreID = T1.StoreID INNER JOIN SalesTeam T3 ON T3.SalesTeamID = T2._SalesTeamID INNER JOIN Products T4 ON T4.ProductID = T2._ProductID ) WHERE T IS NOT NULL"
},
{
    "db_id": "regional_sales",
    "question": "Lists the name of the product and customer who placed an order on 10/21/18 and it was delivered on 11/21/19.",
    "evidence": "ordered on 10/21/18 refers to OrderDate = '10/21/18'; delivered on 11/21/19 refers to DeliveryDate = '11/21/19'; name of product refers to ProductName",
    "SQL": "SELECT T3.ProductName, T1.CustomerNames FROM Customers AS T1 INNER JOIN SalesOrders AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products AS T3 ON T3.ProductID = T2._ProductID WHERE T2.OrderDate = '10/21/18' AND T2.DeliveryDate = '11/21/19'"
},
{
    "db_id": "regional_sales",
    "question": "How many stores procured products on October 27, 2018, in the city of Oregon?",
    "evidence": "October 27, 2018 refers to ProcuredDate = '10/27/18'; 'Oregon' is the State",
    "SQL": "SELECT SUM(CASE WHEN T1.ProcuredDate = '10/27/18' AND T2.CityName = 'Orlando' THEN 1 ELSE 0 END) FROM SalesOrders AS T1 INNER JOIN StoreLocations AS T2 ON T2.StoreID = T1._StoreID"
},
{
    "db_id": "regional_sales",
    "question": "What sales channels are used the most in the 3 places with the highest median income?",
    "evidence": "highest median income refers to Max(MedianIncome)",
    "SQL": "SELECT SalesChannel FROM ( SELECT T1.SalesChannel FROM SalesOrders AS T1 INNER JOIN StoreLocations AS T2 ON T2.StoreID = T1._StoreID ORDER BY T2.MedianIncome DESC LIMIT 3 ) GROUP BY SalesChannel ORDER BY COUNT(SalesChannel) DESC LIMIT 1"
},
{
    "db_id": "regional_sales",
    "question": "List the 5 sales teams that have made sales with the highest net profits.",
    "evidence": "highest net profit = Max(Subtract (UnitPrice, UnitCost))",
    "SQL": "SELECT T2.SalesTeam FROM SalesOrders AS T1 INNER JOIN SalesTeam AS T2 ON T2.SalesTeamID = T1._SalesTeamID ORDER BY REPLACE(T1.UnitPrice, ',', '') - REPLACE(T1.UnitCost, ',', '') DESC LIMIT 5"
},
{
    "db_id": "regional_sales",
    "question": "What is the highest discount applied by the store located in a city of the state of Colorado whose land area is 111039036.",
    "evidence": "highest discount applied refers to Max(DiscountApplied)",
    "SQL": "SELECT MAX(T1.DiscountApplied) FROM SalesOrders AS T1 INNER JOIN StoreLocations AS T2 ON T2.StoreID = T1._StoreID WHERE T2.State = 'Colorado' AND T2.LandArea = 111039036"
},
{
    "db_id": "regional_sales",
    "question": "How many different time zones are there in the Northeast region?",
    "evidence": "",
    "SQL": "SELECT COUNT(DISTINCT T2.TimeZone) FROM Regions AS T1 INNER JOIN StoreLocations AS T2 ON T2.StateCode = T1.StateCode WHERE T1.Region = 'Northeast'"
},
{
    "db_id": "regional_sales",
    "question": "What type of store is most popular in the South?",
    "evidence": "in the South refers to Region = 'South'; type of store that is most popular refers to Max(Count(Type))",
    "SQL": "SELECT DISTINCT CASE WHEN MAX(T2.Population) THEN T2.Type END FROM Regions AS T1 INNER JOIN StoreLocations AS T2 ON T2.StateCode = T1.StateCode"
},
{
    "db_id": "regional_sales",
    "question": "To which region does the sales team that has used the WARE-MKL1006 warehouse the most times for its shipments belong?",
    "evidence": "\"WARE-MKL1006\" is the WarehouseCode; most shipment to region refers to Max(Count(Region))",
    "SQL": "SELECT T2.Region FROM SalesOrders AS T1 INNER JOIN SalesTeam AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T1.WarehouseCode = 'WARE-MKL1006' GROUP BY T2.Region ORDER BY COUNT(T1.OrderNumber) DESC LIMIT 1"
},
{
    "db_id": "regional_sales",
    "question": "In which city is the store with the highest sales order unit price located?",
    "evidence": "highest sales order unit price refers to Max(UnitPrice)",
    "SQL": "SELECT T2.CityName FROM SalesOrders AS T1 INNER JOIN StoreLocations AS T2 ON T2.StoreID = T1._StoreID WHERE REPLACE(T1.UnitPrice, ',', '') = ( SELECT REPLACE(T1.UnitPrice, ',', '') FROM SalesOrders AS T1 INNER JOIN StoreLocations AS T2 ON T2.StoreID = T1._StoreID ORDER BY REPLACE(T1.UnitPrice, ',', '') DESC LIMIT 1 ) ORDER BY REPLACE(T1.UnitPrice, ',', '') DESC LIMIT 1"
},
{
    "db_id": "regional_sales",
    "question": "How many online purchases did Ole Group make in May 2019?",
    "evidence": "\"Ole Group\" is the CustomerNames; online purchase refers to SalesChannel = 'Online'; made in May 2019 refers to OrderDate LIKE '5/%/19'",
    "SQL": "SELECT SUM(CASE WHEN T1.SalesChannel = 'Online' AND T2.CustomerNames = 'Ole Group' AND T1.OrderDate LIKE '5/%/19' THEN 1 ELSE 0 END) FROM SalesOrders AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID"
},
{
    "db_id": "regional_sales",
    "question": "How many stores with less need for products, and purchased through a distributor, are located in Washtenaw County?",
    "evidence": "less need for products refers to OrderQuantity = 1; purchased through a distributor refers to SalesChannel = 'Distributor'; 'Harri County' is the County",
    "SQL": "SELECT SUM(CASE WHEN T1.OrderQuantity = 1 AND T1.SalesChannel = 'Distributor' AND T2.County = 'Washtenaw County' THEN 1 ELSE 0 END) FROM SalesOrders AS T1 INNER JOIN StoreLocations AS T2 ON T2.StoreID = T1._StoreID"
},
{
    "db_id": "regional_sales",
    "question": "What is the least purchased product by stores in the city of Santa Clarita?",
    "evidence": "least purchased product refers to Min(Count(ProductName)); 'Santa Clarita' is the City",
    "SQL": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN SalesOrders AS T2 ON T2._ProductID = T1.ProductID INNER JOIN StoreLocations AS T3 ON T3.StoreID = T2._StoreID WHERE T3.CityName = 'Santa Clarita' GROUP BY T1.ProductName ORDER BY COUNT(T1.ProductName) ASC LIMIT 1"
},
{
    "db_id": "regional_sales",
    "question": "At what Latitude and Longitude is the store that has used the WARE-PUJ1005 warehouse the fewest times?",
    "evidence": "WARE-PUJ1005 is the WarehouseCode; fewest times refers to Min (Count(WarehouseCode))",
    "SQL": "SELECT T2.Latitude, T2.Longitude FROM SalesOrders AS T1 INNER JOIN StoreLocations AS T2 ON T2.StoreID = T1._StoreID WHERE T1.WarehouseCode = 'WARE-PUJ1005' GROUP BY T2.StoreID ORDER BY COUNT(T1.WarehouseCode) ASC LIMIT 1"
},
{
    "db_id": "regional_sales",
    "question": "What percentage of sell orders on 04/04/2020 were for the state of New York?",
    "evidence": "sales order on 04/04/2020 refers to OrderDate = '4/4/20'; 'New York' is the CityName; percentage = Divide (Sum(OrderNumber where CityName = 'New York'), Count (OrderNumber)) * 100",
    "SQL": "SELECT CAST(SUM(CASE WHEN T2.State = 'New York' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.OrderNumber) FROM SalesOrders AS T1 INNER JOIN StoreLocations AS T2 ON T2.StoreID = T1._StoreID WHERE T1.OrderDate = '4/4/20'"
},
{
    "db_id": "regional_sales",
    "question": "What is the average land area of \u200b\u200bthe cities in which stores that purchased products for a unit price of 998.30 are located?",
    "evidence": "average land area = Divide (Sum(LandArea), Count(LandArea))",
    "SQL": "SELECT AVG(T2.LandArea) FROM SalesOrders AS T1 INNER JOIN StoreLocations AS T2 ON T2.StoreID = T1._StoreID WHERE T1.UnitPrice = '998.30'"
},
{
    "db_id": "regional_sales",
    "question": "What is the average household income in cities in the state of New Hampshire where there are stores of the type city?",
    "evidence": "\"New Hampshire\" is the State; average household income = AVG(HouseholdIncome)",
    "SQL": "SELECT AVG(T2.HouseholdIncome) FROM Regions AS T1 INNER JOIN StoreLocations AS T2 ON T2.StateCode = T1.StateCode WHERE T2.State = 'New Hampshire' AND T2.Type = 'City'"
},
{
    "db_id": "regional_sales",
    "question": "How many sales teams are there in the Midwest?",
    "evidence": "\"Midwest\" is the Region",
    "SQL": "SELECT SUM(CASE WHEN Region = 'Midwest' THEN 1 ELSE 0 END) FROM SalesTeam"
},
{
    "db_id": "regional_sales",
    "question": "Indicate order numbers with an order date after 1/1/2018.",
    "evidence": "order date after 1/1/2018 refers to OrderDate > '1/1/2018'",
    "SQL": "SELECT DISTINCT T FROM ( SELECT CASE  WHEN OrderDate > '1/1/18' THEN OrderNumber ELSE NULL END AS T FROM SalesOrders ) WHERE T IS NOT NULL"
},
{
    "db_id": "regional_sales",
    "question": "How many sales channels does the sales team have in the Midwest?",
    "evidence": "\"Midwest\" is the Region",
    "SQL": "SELECT COUNT(T1.SalesChannel) FROM SalesOrders AS T1 INNER JOIN SalesTeam AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T2.Region = 'Midwest'"
},
{
    "db_id": "regional_sales",
    "question": "Which sales team has the other with the highest unit price?",
    "evidence": "highest unit price refers to Max(UnitPrice)",
    "SQL": "SELECT T2.SalesTeam FROM SalesOrders AS T1 INNER JOIN SalesTeam AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE REPLACE(T1.UnitPrice, ',', '') = ( SELECT REPLACE(T1.UnitPrice, ',', '') FROM SalesOrders AS T1 INNER JOIN SalesTeam AS T2 ON T2.SalesTeamID = T1._SalesTeamID ORDER BY REPLACE(T1.UnitPrice, ',', '') DESC LIMIT 1 ) ORDER BY REPLACE(T1.UnitPrice, ',', '') DESC LIMIT 1"
},
{
    "db_id": "regional_sales",
    "question": "Which regions have online sales channels that have the most discounts?",
    "evidence": "most discount refers to Max(DiscountApplied)",
    "SQL": "SELECT T2.Region FROM SalesOrders AS T1 INNER JOIN SalesTeam AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T1.SalesChannel = 'Online' ORDER BY T1.DiscountApplied DESC LIMIT 1"
},
{
    "db_id": "regional_sales",
    "question": "Which Apollo Ltd customer's order number has the most expensive unit price, indicating the order date?",
    "evidence": "\"Apollo Ltd\" is the CustomerNames; most expensive unit price refers to max(UnitPrice)",
    "SQL": "SELECT T1.OrderNumber, T1.OrderDate FROM SalesOrders AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID WHERE T2.CustomerNames = 'Apollo Ltd' ORDER BY T1.UnitPrice DESC LIMIT 1"
},
{
    "db_id": "regional_sales",
    "question": "Provide order number, warehouse code of customers Elorac, Corp.",
    "evidence": "\"Elorac, Corp\" is the CustomerNames",
    "SQL": "SELECT DISTINCT T1.OrderNumber, T1.WarehouseCode FROM SalesOrders AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID WHERE T2.CustomerNames = 'Elorac, Corp'"
},
{
    "db_id": "regional_sales",
    "question": "Name of customers who have ordered Cocktail Glasses by online sales channel.",
    "evidence": "\"Cocktail Glasses\" is the ProductName; customer refers to CustomerNames",
    "SQL": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T3.ProductName = 'Cocktail Glasses' AND T2.SalesChannel = 'Online' THEN T1.CustomerNames END AS T FROM Customers T1 INNER JOIN SalesOrders T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products T3 ON T3.ProductID = T2._ProductID ) WHERE T IS NOT NULL"
},
{
    "db_id": "regional_sales",
    "question": "Which store in Arizona has the most net profit?",
    "evidence": "\"Arizona\" is the name of State; most net profit = Max(Subtract( UnitPrice, UnitCost))",
    "SQL": "SELECT T2.StoreID FROM SalesOrders AS T1 INNER JOIN StoreLocations AS T2 ON T2.StoreID = T1._StoreID WHERE T2.State = 'Arizona' ORDER BY T1.UnitPrice - T1.UnitCost DESC LIMIT 1"
},
{
    "db_id": "regional_sales",
    "question": "How much more is the Florida store's computer product unit price than the Texas store?",
    "evidence": "\"Florida\" and \"Texas\" are both the name of State; Computer product refers to ProductName = 'Computers; difference in unit price = Subtract (UnitPrice where State = 'Florida', UnitPrice where State = 'Texas')",
    "SQL": "SELECT SUM(CASE WHEN T3.State = 'Florida' THEN T2.UnitPrice ELSE 0 END) - SUM(CASE WHEN T3.State = 'Texas' THEN T2.UnitPrice ELSE 0 END) FROM Products AS T1 INNER JOIN SalesOrders AS T2 ON T2._ProductID = T1.ProductID INNER JOIN StoreLocations AS T3 ON T3.StoreID = T2._StoreID WHERE T1.ProductName = 'Computers'"
},
{
    "db_id": "regional_sales",
    "question": "Among sales teams in Midwest region, which sales team has an order quantity greater than 5?",
    "evidence": "order quantity greater than 5 refers to OrderQuantity > 5",
    "SQL": "SELECT DISTINCT T2.SalesTeam FROM SalesOrders AS T1 INNER JOIN SalesTeam AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T2.Region = 'Midwest' AND T1.OrderQuantity > 5"
},
{
    "db_id": "regional_sales",
    "question": "Please indicate store id in the state of California that have been applied 20% discount in store.",
    "evidence": "\"California\" is the name of State; in store refers to SalesChannel = 'In-Store'; 20% discount refers to DiscountApplied = '0.2'",
    "SQL": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.State = 'California' AND T1.SalesChannel = 'In-Store' AND T1.DiscountApplied = 0.2 THEN T2.StoreID END AS T FROM SalesOrders T1 INNER JOIN StoreLocations T2 ON T2.StoreID = T1._StoreID ) WHERE T IS NOT NULL"
},
{
    "db_id": "regional_sales",
    "question": "List the name of the customer with the most number of order quantity from 2018 to 2020.",
    "evidence": "name of customer refers to CustomerNames; from 2018 to 2020 refers to OrderDate between '1/1/2018' and '31/12/2020'; most number of order quantity refers to OrderQuantity = 8",
    "SQL": "SELECT T1.CustomerNames FROM Customers AS T1 INNER JOIN SalesOrders AS T2 ON T2._CustomerID = T1.CustomerID WHERE T2.OrderDate LIKE '%/%/18' OR T2.OrderDate LIKE '%/%/19' OR T2.OrderDate LIKE '%/%/20' ORDER BY T2.OrderQuantity DESC LIMIT 1"
},
{
    "db_id": "regional_sales",
    "question": "Please indicate total order quantity of product Candles and calculate the percentage of such product among all the orders.",
    "evidence": "total order quantity refers to Sum (OrderQuantity); 'Candles' is the ProductsName; percentage = Divide (Sum(OrderQuantity where ProductName = 'Candles'), Sum(OrderQuantity)) * 100",
    "SQL": "SELECT SUM(CASE WHEN T1.ProductName = 'Candles' THEN T2.OrderQuantity ELSE 0 END), CAST(SUM(CASE WHEN T1.ProductName = 'Candles' THEN T2.OrderQuantity ELSE 0 END) AS REAL) * 100 / SUM(T2.OrderQuantity) FROM Products AS T1 INNER JOIN SalesOrders AS T2 ON T2._ProductID = T1.ProductID INNER JOIN StoreLocations AS T3 ON T3.StoreID = T2._StoreID"
},
{
    "db_id": "regional_sales",
    "question": "Which region is Joshua Bennet located in?",
    "evidence": "\"Joshua Bennett\" is the name of SalesTeam",
    "SQL": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN SalesTeam = 'Joshua Bennett' THEN Region ELSE NULL END AS T FROM SalesTeam ) WHERE T IS NOT NULL"
},
{
    "db_id": "regional_sales",
    "question": "What is the store id of the store located in the most populous county?",
    "evidence": "most populous country refers to Max(Population)",
    "SQL": "SELECT CASE WHEN MAX(Population) THEN StoreID END FROM StoreLocations"
},
{
    "db_id": "regional_sales",
    "question": "How many sales teams are there in the Midwest?",
    "evidence": "\"Midwest\" is the Region",
    "SQL": "SELECT SUM(CASE WHEN Region = 'Midwest' THEN 1 ELSE 0 END) FROM SalesTeam"
},
{
    "db_id": "regional_sales",
    "question": "What is the type of store located in the city with the highest amount of water area?",
    "evidence": "type of store in City refers to Type = 'City'; highest amount of water area refers to Max(WaterArea)",
    "SQL": "SELECT CASE WHEN MAX(WaterArea) THEN Type END FROM StoreLocations"
},
{
    "db_id": "regional_sales",
    "question": "How many online orders were shipped during the month of June 2018?",
    "evidence": "online orders refers to SalesChannel = 'Online'; shipped during the month of June 2018 refers to SUBSTR(ShipDate, 1, 1) = '6' AND SUBSTR(ShipDate,-2) = '18'",
    "SQL": "SELECT SUM(IIF(ShipDate LIKE '6/%/18' AND SalesChannel = 'Online', 1, 0)) FROM SalesOrders"
},
{
    "db_id": "regional_sales",
    "question": "How much is the discount applied to the order with the highest unit price?",
    "evidence": "highest unit price refers to Max(UnitPrice)",
    "SQL": "SELECT DiscountApplied FROM SalesOrders WHERE REPLACE(UnitPrice, ',', '') = ( SELECT REPLACE(UnitPrice, ',', '') FROM SalesOrders ORDER BY REPLACE(UnitPrice, ',', '') DESC LIMIT 1 ) ORDER BY REPLACE(UnitPrice, ',', '') DESC LIMIT 1"
},
{
    "db_id": "regional_sales",
    "question": "What is the name of the product with the highest net profit?",
    "evidence": "highest net profit = Max(Subtract (UnitPrice, UnitCost)); name of product refers to ProductName",
    "SQL": "SELECT T2.ProductName FROM SalesOrders AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID ORDER BY REPLACE(T1.UnitPrice, ',', '') - REPLACE(T1.UnitCost, ',', '') DESC LIMIT 1"
},
{
    "db_id": "regional_sales",
    "question": "In the Northeast region, what is the average household income for each city located in the state with the highest number of stores?",
    "evidence": "average household income = Divide (Sum(HouseholdIncome), Count(CityName)); highest number of store refers to Max(Count(StoreID))",
    "SQL": "SELECT AVG(T2.HouseholdIncome) FROM Regions AS T1 INNER JOIN StoreLocations AS T2 ON T2.StateCode = T1.StateCode WHERE T1.Region = 'Northeast' GROUP BY T2.State ORDER BY COUNT(T2.StoreID) DESC LIMIT 1"
},
{
    "db_id": "regional_sales",
    "question": "In which region can you find the stores located in the state whose median income is no more than 30,000?",
    "evidence": "median income no more than 30,000 refers to MedianIncome < 30,000",
    "SQL": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.MedianIncome < 30000 THEN T1.Region END AS T FROM Regions T1 INNER JOIN StoreLocations T2 ON T2.StateCode = T1.StateCode ) WHERE T IS NOT NULL"
},
{
    "db_id": "regional_sales",
    "question": "In the West, how many stores are there in the city whose land area is below 20,000,000?",
    "evidence": "\"West\" is the Region; land area is below 20,000,000 refers to LandArea < 20,000,000",
    "SQL": "SELECT SUM(CASE WHEN T1.Region = 'West' AND T2.LandArea < 20000000 THEN 1 ELSE 0 END) FROM Regions AS T1 INNER JOIN StoreLocations AS T2 ON T2.StateCode = T1.StateCode"
},
{
    "db_id": "regional_sales",
    "question": "What is the name of the customer who purchased the product with the highest net profiit?",
    "evidence": "highest net profit = Max(Subtract (UnitPrice, UnitCost)); name of customer refers to CustomerNames",
    "SQL": "SELECT CustomerNames FROM ( SELECT T1.CustomerNames, T2.UnitPrice - T2.UnitCost AS \"net profit\" FROM Customers T1 INNER JOIN SalesOrders T2 ON T2._CustomerID = T1.CustomerID ) ORDER BY net profit DESC LIMIT 1"
},
{
    "db_id": "regional_sales",
    "question": "In 2019, how many orders were shipped by the sales team with the highest number of orders in the said year? Provide the name of the sales team.",
    "evidence": "shipped refers to ShipDate; in 2019 refers to shipped in 2019 refers to SUBSTR(ShipDate, -2) = '19'; order in the said year refers to SUBSTR(OrderDate, -2) = '19'; highest number of order refers to Max(Count(OrderNumber))",
    "SQL": "SELECT COUNT(T1.OrderNumber), T2.SalesTeam FROM SalesOrders AS T1 INNER JOIN SalesTeam AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T1.OrderDate LIKE '%/%/19' AND T1.ShipDate LIKE '%/%/19' GROUP BY T2.SalesTeam ORDER BY COUNT(T1.OrderNumber) DESC LIMIT 1"
},
{
    "db_id": "regional_sales",
    "question": "Among the products with an order quantity of no less than 5 that was shipped in the month of May 2019, what is the name of the product with the lowest net profit?",
    "evidence": "order quantity of no less than 5 refers to OrderQuantity > 5; shipped in the month of May 2019 refers to ShipDate LIKE '5/%/19'; lowest net profit = Min(Subtract(UnitPrice, UnitCost)); name of product refers to ProductsName",
    "SQL": "SELECT T2.ProductName FROM SalesOrders AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T1.OrderQuantity > 5 AND ShipDate LIKE '5/%/19' ORDER BY REPLACE(T1.UnitPrice, ',', '') - REPLACE(T1.UnitCost, ',', '') ASC LIMIT 1"
},
{
    "db_id": "regional_sales",
    "question": "What is the detailed coordinates of the store where the product with the 4th highest profit were purchased from?",
    "evidence": "detailed coordinates refers to Latitude, Longitude; highest net profit = Max(Subtract(UnitPrice, UnitCost))",
    "SQL": "SELECT T2.Latitude, T2.Longitude FROM SalesOrders AS T1 INNER JOIN StoreLocations AS T2 ON T2.StoreID = T1._StoreID ORDER BY REPLACE(T1.UnitPrice, ',', '') - REPLACE(T1.UnitCost, ',', '') DESC LIMIT 3, 1"
},
{
    "db_id": "regional_sales",
    "question": "How many orders were shipped by the sales team with the highest amount of shipped orders in 2020? Give the name of the said sales team.",
    "evidence": "shipped refers to ShipDate; in 2020 refers to SUBSTR(ShipDate, -2) = '20'; highest amount of shipped orders refers to Max(Count(OrderNumber))",
    "SQL": "SELECT COUNT(T1.OrderNumber), T2.SalesTeam FROM SalesOrders AS T1 INNER JOIN SalesTeam AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T1.ShipDate LIKE '%/%/20' GROUP BY T2.SalesTeam ORDER BY COUNT(T1.OrderNumber) DESC LIMIT 1"
},
{
    "db_id": "regional_sales",
    "question": "Between 2018 to 2020, what is the average amount of shipped orders per year under Carl Nguyen?",
    "evidence": "shipped refers to ShipDate; between 2018 and 2020 refers to SUBSTR(ShipDate, -2) IN ('18', '19', '20'); 'Carl Nguyen' is the name of SalesTeam; average shipped orders per year = Divide (Count(OrderNumber), 3)",
    "SQL": "SELECT CAST(COUNT(T1.OrderNumber) AS REAL) / 3 FROM SalesOrders AS T1 INNER JOIN SalesTeam AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE (T2.SalesTeam = 'Carl Nguyen' AND ShipDate LIKE '%/%/18') OR (T2.SalesTeam = 'Carl Nguyen' AND ShipDate LIKE '%/%/19') OR (T2.SalesTeam = 'Carl Nguyen' AND ShipDate LIKE '%/%/20')"
},
{
    "db_id": "regional_sales",
    "question": "What is the amount of discount applied to the product with the highest net profit and what is the name of the said product?",
    "evidence": "highest net profit refers to Max(Subtract(UnitPrice, UnitCost)); name of product refers to ProductName",
    "SQL": "SELECT T1.UnitPrice * T1.DiscountApplied, T2.ProductName FROM SalesOrders AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID ORDER BY REPLACE(T1.UnitPrice, ',', '') - REPLACE(T1.UnitCost, ',', '') DESC LIMIT 1"
},
{
    "db_id": "regional_sales",
    "question": "What are the names of the top 3 customers who paid the highest amount of price per order after discount?",
    "evidence": "highest price per order after discount refers to Max(Subtract(Multiply (UnitPrice, OrderQuantity), DiscountApplied)); name of customer refers to CustomerNames",
    "SQL": "SELECT CustomerNames FROM ( SELECT T1.CustomerNames , REPLACE(T2.UnitPrice, ',', '') * T2.OrderQuantity - REPLACE(T2.UnitPrice, ',', '') * T2.DiscountApplied AS T FROM Customers T1 INNER JOIN SalesOrders T2 ON T2._CustomerID = T1.CustomerID ) ORDER BY T DESC LIMIT 3"
},
{
    "db_id": "regional_sales",
    "question": "Which sales channel was most preferred in commercializing products in January 2020 based on the number of orders placed?",
    "evidence": "order refers to OrderDate; in 2020 refers to Substr(OrderDate, -2) = '20'; January refers to Substr(OrderDate, 1, 1) = '1';\u00a0 most preferred sales channel refers to SalesChannel where Max(Count(OrderNumber))",
    "SQL": "SELECT SalesChannel FROM SalesOrders WHERE OrderDate LIKE '1/%/20' GROUP BY SalesChannel ORDER BY COUNT(SalesChannel) DESC LIMIT 1"
},
{
    "db_id": "regional_sales",
    "question": "Name the product that was registered in the sales order 'SO - 0005951'.",
    "evidence": "sales order 'SO - 0005951' refers to OrderNumber = 'SO - 0005951'; product refers to ProductName",
    "SQL": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.OrderNumber = 'SO - 0005951' THEN T1.ProductName ELSE NULL END AS T FROM Products T1 INNER JOIN SalesOrders T2 ON T2._ProductID = T1.ProductID ) WHERE T IS NOT NULL"
},
{
    "db_id": "regional_sales",
    "question": "Identify the store location and sales team who processed the sales order 'SO - 0001004'.",
    "evidence": "sales order 'SO - 0001004' refers to OrderNumber = 'SO - 0001004'; store location refers to CityName",
    "SQL": "SELECT T3.SalesTeam, T1.CityName FROM StoreLocations AS T1 INNER JOIN SalesOrders AS T2 ON T2._StoreID = T1.StoreID INNER JOIN SalesTeam AS T3 ON T3.SalesTeamID = T2._SalesTeamID WHERE T2.OrderNumber = 'SO - 0001004'"
},
{
    "db_id": "regional_sales",
    "question": "Identify the top customer of the store located in Gilbert, Arizona based on net profit associated with the customer relationship in 2019.",
    "evidence": "\"Gilbert\" is the CityName; 'Arizona' is the name of State; customer relationship in 2019 refers to ProcuredDate LIKE '%/19'; top net profit refers to Max(Subtract(UnitPrice, UnitCost))",
    "SQL": "SELECT T1.CustomerNames FROM Customers AS T1 INNER JOIN SalesOrders AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN StoreLocations AS T3 ON T3.StoreID = T2._StoreID WHERE T3.CityName = 'Gilbert' AND T2.ProcuredDate LIKE '%/%/19' ORDER BY REPLACE(T2.UnitPrice, ',', '') - REPLACE(T2.UnitCost, ',', '') DESC LIMIT 1"
},
{
    "db_id": "regional_sales",
    "question": "How many sales orders were processed by the store located in Chandler in 2020?",
    "evidence": "\"Chandler\" is the CityName; orders refers to OrderDate; in 2020 refers to Substr(OrderDate, -2) = '20'",
    "SQL": "SELECT SUM(CASE WHEN T2.CityName = 'Chandler' AND T1.OrderDate LIKE '%/%/20' THEN 1 ELSE 0 END) FROM SalesOrders AS T1 INNER JOIN StoreLocations AS T2 ON T2.StoreID = T1._StoreID"
},
{
    "db_id": "regional_sales",
    "question": "What is the average household income of Glendale?",
    "evidence": "\"Glendale\" is the CityName; Average household income refers to avg(HouseholdIncome)",
    "SQL": "SELECT AVG(HouseholdIncome) FROM StoreLocations WHERE CityName = 'Glendale'"
},
{
    "db_id": "regional_sales",
    "question": "What was the best discount applied to sales orders in 2020?",
    "evidence": "sales orders in 2020 refers to Substr(OrderDate, -2) = '20'; best discount applied refers to Max(DiscountApplied)",
    "SQL": "SELECT MAX(DiscountApplied) FROM SalesOrders WHERE OrderDate LIKE '%/%/20'"
}]
